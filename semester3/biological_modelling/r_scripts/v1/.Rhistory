setwd("~/workspace/study/semester3/biological_modelling/r_scripts/v1")
eq = function(x){x*x}
plot(eq, 1, 1000)
eq = function(x){x*x}
plot(eq, -10, 10)
p_n_plus_1 = function(x,y) {x*y}
plot(eq(1:10))
p_n_plus_1 = function(x,y) {x*y}
plot(eq(1:10, 2:5))
mylist <- list(a=1,b=2,c=3)
myfxn <- function(var1,var2){
var1*var2
}
var2 <- 2
sapply(mylist,myfxn,var2=var2)
mylist <- list(a=1,b=2,c=3)
myfxn <- function(var1,var2){
var1*var2
}
var2 <- 2
sapply(mylist,myfxn,var2=var2)
mylist <- list(a=1,b=2,c=3)
myfxn <- function(var1,var2){
var1*var2
}
var2 <- 2
plot(sapply(mylist,myfxn,var2=var2))
lf = function(x, m, n) {
mx+n
}
x_data = [1:10]
#myfxn <- function(x, fx2, fx1, y){
#  fx2*x^x + fx1*x + y
#}
#plot(sapply(mylist,myfxn,var2=var2))
lf = function(x, m, n) {
mx+n
}
x_data = [1:10]
#myfxn <- function(x, fx2, fx1, y){
#  fx2*x^x + fx1*x + y
#}
#plot(sapply(mylist,myfxn,var2=var2))
x_data = [1:10]
lf = function(x, m, n) {
mx+n
}
data = list(x = 1:10, m = 1, n = 0)
#myfxn <- function(x, fx2, fx1, y){
#  fx2*x^x + fx1*x + y
#}
#plot(sapply(mylist,myfxn,var2=var2))
lf = function(x, m, n) {
mx+n
}
data = list(x = 1:10, m = 1, n = 0)
plot(lapply(data, lf))
#myfxn <- function(x, fx2, fx1, y){
#  fx2*x^x + fx1*x + y
#}
#plot(sapply(mylist,myfxn,var2=var2))
lf = function(x, m, n) {
m*x+n
}
data = list(x = 1:10, m = 1, n = 0)
plot(lapply(data, lf))
#myfxn <- function(x, fx2, fx1, y){
#  fx2*x^x + fx1*x + y
#}
#plot(sapply(mylist,myfxn,var2=var2))
lf = function(x, m, n) {
x
m*x + n
}
data = list(x = 1:10, m = 1, n = 0)
plot(lapply(data, lf))
#myfxn <- function(x, fx2, fx1, y){
#  fx2*x^x + fx1*x + y
#}
#plot(sapply(mylist,myfxn,var2=var2))
lf = function(x, m, n) {
x
m*x + n
}
data = list(x = 1:10, m = 1, n = 0)
plot(lapply(data, lf))
#myfxn <- function(x, fx2, fx1, y){
#  fx2*x^x + fx1*x + y
#}
#plot(sapply(mylist,myfxn,var2=var2))
lf = function(x, m, n) {
x
m*x + n
}
data = list(x = 1:10, m = 1, n = 0)
plot(sapply(data, lf))
#myfxn <- function(x, fx2, fx1, y){
#  fx2*x^x + fx1*x + y
#}
#plot(sapply(mylist,myfxn,var2=var2))
lf = function(x, m, n) {
return m*x + n
}
data = list(x = 1:10, m = 1, n = 0)
#plot(lapply(data, lf))
lf(data)
#myfxn <- function(x, fx2, fx1, y){
#  fx2*x^x + fx1*x + y
#}
#plot(sapply(mylist,myfxn,var2=var2))
lf = function(x, m, n) {
return m*x + n
}
data = list(x = 1:10, m = 1, n = 0)
#plot(lapply(data, lf))
lf(2, 1, 4)
#myfxn <- function(x, fx2, fx1, y){
#  fx2*x^x + fx1*x + y
#}
#plot(sapply(mylist,myfxn,var2=var2))
lf = function(x, m, n) {
return m*x + n
}
data = list(x = 1:10, m = 1, n = 0)
#plot(lapply(data, lf))
lf(1:10, 1, 4)
#myfxn <- function(x, fx2, fx1, y){
#  fx2*x^x + fx1*x + y
#}
#plot(sapply(mylist,myfxn,var2=var2))
lf = function(x, m, n) {
return m*x + n
}
data = list(x = 1:10, m = 1, n = 0)
#plot(lapply(data, lf))
lf(1:10, 2, 4)
#myfxn <- function(x, fx2, fx1, y){
#  fx2*x^x + fx1*x + y
#}
#plot(sapply(mylist,myfxn,var2=var2))
lf = function(x, m, n) {
return ((m*x) + n)
}
data = list(x = 1:10, m = 1, n = 0)
#plot(lapply(data, lf))
lf(1:10, 2, 4)
#myfxn <- function(x, fx2, fx1, y){
#  fx2*x^x + fx1*x + y
#}
#plot(sapply(mylist,myfxn,var2=var2))
lf = function(x, m, n) {
((m*x) + n)
}
data = list(x = 1:10, m = 1, n = 0)
#plot(lapply(data, lf))
lf(1:10, 2, 4)
#myfxn <- function(x, fx2, fx1, y){
#  fx2*x^x + fx1*x + y
#}
#plot(sapply(mylist,myfxn,var2=var2))
lf = function(x, m, n) {
((m*x) + n)
}
data = list(x = 1:10, m = 1, n = 0)
#plot(lapply(data, lf))
plot(lf(1:10, 2, 4))
#myfxn <- function(x, fx2, fx1, y){
#  fx2*x^x + fx1*x + y
#}
#plot(sapply(mylist,myfxn,var2=var2))
lf = function(x, m, n) {
((m*x) + n)
}
data = list(x = 1:10, m = 1, n = 0)
#plot(lapply(data, lf))
plot(lf(1.0:10.0, 2, 4))
#myfxn <- function(x, fx2, fx1, y){
#  fx2*x^x + fx1*x + y
#}
#plot(sapply(mylist,myfxn,var2=var2))
lf = function(x, m, n) {
((m*x) + n)
}
data = list(x = 1:10, m = 1, n = 0)
#plot(lapply(data, lf))
plot(lf(1:10, 2, 4))
#myfxn <- function(x, fx2, fx1, y){
#  fx2*x^x + fx1*x + y
#}
#plot(sapply(mylist,myfxn,var2=var2))
lf = function(x, m, n) {
((m*x) + n)
}
data = list(x = 1:10, m = 1, n = 0)
#plot(lapply(data, lf))
plot(lf(1:10, 2, 0))
#myfxn <- function(x, fx2, fx1, y){
#  fx2*x^x + fx1*x + y
#}
#plot(sapply(mylist,myfxn,var2=var2))
lf = function(x, m, n) {
((m*x) + n)
}
data = list(x = 1:10, m = 1, n = 0)
#plot(lapply(data, lf))
plot(lf(1:10, 1, 0))
#myfxn <- function(x, fx2, fx1, y){
#  fx2*x^x + fx1*x + y
#}
#plot(sapply(mylist,myfxn,var2=var2))
lf = function(x, m, n) {
((m*x) + n)
}
data = list(x = 1:10, m = 1, n = 0)
#plot(lapply(data, lf))
plot(lf(1:10, 0, 0))
#myfxn <- function(x, fx2, fx1, y){
#  fx2*x^x + fx1*x + y
#}
#plot(sapply(mylist,myfxn,var2=var2))
lf = function(x, m, n) {
((m*x) + n)
}
data = list(x = 1:10, m = 1, n = 0)
#plot(lapply(data, lf))
plot(lf(1:10, 0, 5))
#myfxn <- function(x, fx2, fx1, y){
#  fx2*x^x + fx1*x + y
#}
#plot(sapply(mylist,myfxn,var2=var2))
lin_func = function(x, m, n) {
((m*x) + n)
}
data = list(x = 1:10, m = 1, n = 0)
#plot(lapply(data, lf))
plot(lin_func(1:10, 0:1, 5))
#myfxn <- function(x, fx2, fx1, y){
#  fx2*x^x + fx1*x + y
#}
#plot(sapply(mylist,myfxn,var2=var2))
lin_func = function(x, m, n) {
((m*x) + n)
}
data = list(x = 1:10, m = 1, n = 0)
#plot(lapply(data, lf))
plot(lin_func(1:10, 1, 0:3))
#myfxn <- function(x, fx2, fx1, y){
#  fx2*x^x + fx1*x + y
#}
#plot(sapply(mylist,myfxn,var2=var2))
lin_func = function(x, m, n) {
((m*x) + n)
}
data = list(x = 1:10, m = 1, n = 0)
#plot(lapply(data, lf))
plot(lin_func(0:30, 1, 0:3))
#myfxn <- function(x, fx2, fx1, y){
#  fx2*x^x + fx1*x + y
#}
#plot(sapply(mylist,myfxn,var2=var2))
lin_func = function(x, m, n) {
((m*x) + n)
}
data = list(x = 1:10, m = 1, n = 0)
#plot(lapply(data, lf))
plot(lin_func(0:30, 1, 0))
#myfxn <- function(x, fx2, fx1, y){
#  fx2*x^x + fx1*x + y
#}
#plot(sapply(mylist,myfxn,var2=var2))
# quadratic function
quad_func = function(x, fx2, fx1, y){
fx2*x^x + fx1*x + y
}
plot(quad_func(0:10, 1, 1, 0))
# quadratic function
quad_func = function(x, fx2, fx1, y){
((fx2*(x^x)) + (fx1*x) + y)
}
plot(quad_func(0:10, 1, 1, 0))
quad_func = function(x, fx2, fx1, y){
((fx2*(x^x)) + (fx1*x) + y)
}
plot(quad_func(0:10, 1, 1, 1))
quad_func = function(x, a, b, c) {
((a*(x^x)) + (b*x) + c)
}
plot(quad_func(0:10, 1, 1, 0))
quad_func = function(x, a, b, c) {
((a*(x*x)) + (b*x) + c)
}
plot(quad_func(0:10, 1, 1, 0))
quad_func = function(x, a, b, c) {
((a*(x*x)) + (b*x) + c)
}
plot(quad_func(0:10, 1, 1, 5))
quad_func = function(x, a, b, c) {
((a*(x*x)) + (b*x) + c)
}
plot(quad_func(0:10, 1, 1, 50))
quad_func = function(x, a, b, c) {
((a*(x*x)) + (b*x) + c)
}
plot(quad_func(-10:10, 1, 1, 0))
source('~/.active-rstudio-document')
own_func = function(c, lambda, n) {
(c*lambda^n)
}
plot(own_func(1, 1.15, 0:8))
plot(own_func(1, 0.5, 0:8))
plot(own_func(1, -0.9, 0:8))
plot(own_func(1, -1.1, 0:8))
lines(own_func(1, 1.15, 0:8))
lines(plot(own_func(1, -1.1, 0:8)))
own_func = function(c, lambda, n) {
return (c*lambda^n)
}
#plot(own_func(1, 1.15, 0:8))
#plot(own_func(1, 0.5, 0:8))
#plot(own_func(1, -0.9, 0:8))
#plot(own_func(1, -1.1, 0:8))
data = own_func(1, 1.15, 0:8)
plot(0:8, data)
data = own_func(1, 1.15, 0:8)
plot(0:8, data)
line(0:8, data)
data = own_func(1, 1.15, 0:8)
plot(0:8, data)
lines(0:8, data)
own_func = function(c, lambda, n) {
return (c*lambda^n)
}
#plot(own_func(1, 1.15, 0:8))
#plot(own_func(1, 0.5, 0:8))
#plot(own_func(1, -0.9, 0:8))
#plot(own_func(1, -1.1, 0:8))
data = own_func(1, 1.15, 0:8)
plot(0:8, data)
lines(0:8, data)
own_func = function(c, lambda, n) {
return (c*lambda^n)
}
data = own_func(1, 1.15, 0:8)
plot(0:8, data)
lines(0:8, data)
data = own_func(1, 0.5, 0:8)
plot(0:8, data)
lines(0:8, data)
data = own_func(1, -0.9, 0:8)
plot(0:8, data)
lines(0:8, data)
data = own_func(1, -1.1, 0:8)
plot(0:8, data)
lines(0:8, data)
data = own_func(1, 1.15, 0:8)
plot(0:8, data, col('red'))
lines(0:8, data)
own_func = function(c, lambda, n) {
return (c*lambda^n)
}
data = own_func(1, 1.15, 0:8)
plot(0:8, data, col(list('red')))
lines(0:8, data)
data = own_func(1, 0.5, 0:8)
plot(0:8, data)
lines(0:8, data)
data = own_func(1, -0.9, 0:8)
plot(0:8, data)
lines(0:8, data)
data = own_func(1, -1.1, 0:8)
plot(0:8, data)
lines(0:8, data)
own_func = function(c, lambda, n) {
return (c*lambda^n)
}
data = own_func(1, 1.15, 0:8)
plot(0:8, data, col = list('red'))
lines(0:8, data)
data = own_func(1, 0.5, 0:8)
plot(0:8, data)
lines(0:8, data)
data = own_func(1, -0.9, 0:8)
plot(0:8, data)
lines(0:8, data)
data = own_func(1, -1.1, 0:8)
plot(0:8, data)
lines(0:8, data)
own_func = function(c, lambda, n) {
return (c*lambda^n)
}
data = own_func(1, 1.15, 0:8)
plot(0:8, data, col = 'red')
lines(0:8, data)
data = own_func(1, 0.5, 0:8)
plot(0:8, data)
lines(0:8, data)
data = own_func(1, -0.9, 0:8)
plot(0:8, data)
lines(0:8, data)
data = own_func(1, -1.1, 0:8)
plot(0:8, data)
lines(0:8, data)
own_func = function(c, lambda, n) {
return (c*lambda^n)
}
data = own_func(1, 1.15, 0:8)
plot(0:8, data, col = 'black')
lines(0:8, data, col = 'black')
data = own_func(1, 0.5, 0:8)
plot(0:8, data, col = 'red')
lines(0:8, data, col = 'red')
data = own_func(1, -0.9, 0:8)
plot(0:8, data, col = 'green')
lines(0:8, data, col = 'green')
data = own_func(1, -1.1, 0:8)
plot(0:8, data, col = 'blue')
lines(0:8, data, col = 'blue')
own_func = function(c, lambda, n) {
return (c*lambda^n)
}
data = own_func(1, 1.15, 0:8)
plot(0:8, data, col = 'black')
lines(0:8, data, col = 'black')
own_func = function(c, lambda, n) {
return (c*lambda^n)
}
data = own_func(5, 1.15, 0:8)
plot(0:8, data, col = 'black')
lines(0:8, data, col = 'black')
own_func = function(c, lambda, n) {
return (c*lambda^n)
}
data = own_func(1, 1.15, 0:80)
plot(0:8, data, col = 'black')
lines(0:8, data, col = 'black')
own_func = function(c, lambda, n) {
return (c*lambda^n)
}
data = own_func(1, 1.15, 0:80)
plot(0:8, data, col = 'black')
lines(0:8, data, col = 'black')
own_func = function(c, lambda, n) {
return (c*lambda^n)
}
n = 0:80
data = own_func(1, 1.15, n)
plot(n, data, col = 'black')
lines(n, data, col = 'black')
own_func = function(c, lambda, n) {
return (c*lambda^n)
}
n = 0:8
data = own_func(1, 1.15, n)
plot(n, data, col = 'black')
lines(n, data, col = 'black')
own_func = function(c, lambda, n) {
return (c*lambda^n)
}
n = 0:80
data = own_func(1, 1.15, n)
plot(n, data, col = 'black')
lines(n, data, col = 'black')
data = own_func(1, 0.5, n)
plot(n, data, col = 'red')
lines(n, data, col = 'red')
data = own_func(1, -0.9, n)
plot(n, data, col = 'green')
lines(n, data, col = 'green')
data = own_func(1, -1.1, n)
plot(n, data, col = 'blue')
lines(n, data, col = 'blue')
